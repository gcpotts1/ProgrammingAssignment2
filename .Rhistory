as.character(files)
gewd()
getwd()
setwd("C:/Users/a2743ft/ProgrammingAssignment2")
dir()
x <- [2:2]
x <- (2, 2, 10)
dim(x) <- c(4, 5)
x <- data.frame
dim(x) <- c(4, 5)
x <- data.frame(4:4)
x
x <- data.frame(4:4, 4)
x
matrix(x, 4, 4)
matrix(y, 4)
rm(list(ls))
rm(list=ls())
matrix(x, 4, 4)
x <- matrix(4,4)
x
x <- matrix(1, 4, 4)
x
data <- x
rm(x)
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setinvmat <- function(solve) im <<- solve
getinvmat <- function() im
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
makeCacheMatrix(data)
im
data <- matrix(1:16, 4, 4)
data
makeCacheMatrix(data)
cacheSolve <- function(x, ...) {
im <- x$getinvmat()
if(!is.null(im)) {
message("getting cached data")
return(im)
}
data <- x$get()
im <- solve(data, ...)
x$setinvmat(im)
im
## Return a matrix that is the inverse of 'x'
}
cacheSolve(data)
x$getinvmat()
data$getinvmat
im <- solve(data)
solve.qr(data)
solve(data)
data <- matrix(3, 3)
data
data <- matrix(1, 3, 3)
data
data(data[1,1] = 2)
data[1,1] = 2
data
data[2,1]=3
data[2,2]=2
data[3,1]=2
data[3,3]=2
data
solve(data)
cacheSolve(data)
data$getinvmat()
is.vector(data)
as.vector(data)
cacheSolve(data)
data
list
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setinvmat <- function(solve) im <<- solve
getinvmat <- function() im
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
print(im, x)
}
makeCacheMatrix(data)
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setinvmat <- function(solve) im <<- solve
getinvmat <- function() im
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
print(im)
print(x)
}
makeCacheMatrix(data)
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setinvmat <- function(solve) im <<- solve
getinvmat <- function() im
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
print(set)
print(get)
}
makeCacheMatrix(data)
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setinvmat <- function(solve) im <<- solve
getinvmat <- function() im
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
print(y)
print(setinvmat)
}
makeCacheMatrix(data)
y = numeric()
y
makeCacheMatrix()
rm(list=ls())
x <- matrix(1, 3, 3)
x
x[1,1] = 2
x[2,1]=3
x[3,1]=2
x[2,2]=2
x[3,3]2
x[3,3]=2
x
z <- x
z
rm(x)
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setinvmat <- function(solve) im <<- solve
getinvmat <- function() im
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
print(y)
print(x)
}
makeCacheMatrix(z)
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setinvmat <- function(solve) im <<- solve
getinvmat <- function() im
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
print(x)
print(y)
}
makeCacheMatrix(z)
set(z)
cacheSolve(z)
cacheSolve <- function(x, ...) {
im <- x$getinvmat()
if(!is.null(im)) {
message("getting cached data")
return(im)
}
data <- x$get()
im <- solve(data, ...)
x$setinvmat(im)
im
## Return a matrix that is the inverse of 'x'
}
cacheSolve(z)
cacheSolve(z, set(z))
im <- NULL
set <- function(z) { x <<- y}
im
y
x
set(z)
cacheSolve(z, makeCacheMatrix(z))
setinvmat <- function(solve) im <<- solve
setinvmat(z)
z
im
setinvmat <- function (im) solve(im)
setinvmat(z)
getinvmat <- function() im
getinvmat(im)
getinvmat
im <- x$getinvmat()
im <- z$getinvmat()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list (set = set, get = get, setmean = setmean, getmean = getmean)
}
cachemean1 <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
x <- c(1, 6, 8)
cachemean(x)
makeVector(x)
cachemean1(x)
m <- getmean()
cachemean1(x, get, setmean, getmean)
getmean <- function() x
m <- x$getmean()
setmean <- function(mean) m <<- mean
setmean(x)
mean
getmean <- function() m
getmean
getmean(mean)
rm cachemean1
ls()
rm cachemean1
rm cacheSolve
rm ls(1)
list(ls())
rm(ls(1))
rm(cachemean1)
rm cacheSolve
rm(cacheSolve)
rm(getinvmat)
rm(getmean)
rm(im)
rm(m)
rm(makeCacheMatrix)
rm(makeVector
rm(set
rm(set)
ls()
rm(makeVector)
rm(setinvmat)
rm(setmean)
rm(x)
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setinvmat <- function(solve) im <<- solve
getinvmat <- function() im
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
x <- makeCacheMatrix()
x <- makeCacheMatrix(z)
x
x$get()
x <- solve(x)
x <- solve(z)
x$set(matrix(x, 3, 3))
x$get()
x <- makeCacheMatrix(z)
x$get()
cacheSolve <- function(x, ...) {
im <- x[getinvmat()]
if(!is.null(im)) {
message("getting cached data")
return(im)
}
data <- x$get()
im <- solve(data, ...)
x$setinvmat(im)
im
## Return a matrix that is the inverse of 'x'
}
cacheSolve (x)
x <- makeCacheMatrix(z)
cacheSolve (x)
rm(x)
rm(cacheSolve)
rm(makeCacheMatrix)
## Put comments here that give an overall description of what your
## functions do
## This file contains two functions makeCacheMatrix and cacheSolve.
## The intent is to take a user provided matrix and compute the inverse.
## The first function performs four tasks
## 1) Take the user input and changes the x in cache to y
## 2) Returns the matrix x
## 3) Store the inverted matrix
## 4) Get the inverted matrix from cache
cahcematrix <- function() {
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setinvmat <- function(solve) im <<- solve
getinvmat <- function() im
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
im <- x[getinvmat()]
if(!is.null(im)) {
message("getting cached data")
return(im)
}
data <- x$get()
im <- solve(data, ...)
x$setinvmat(im)
im
## Return a matrix that is the inverse of 'x'
}
}
a <- cahcematrix()
a$makeCacheMatrix(z)
a <- makeCacheMatrix(z)
a <- cahcematrix()
a$makeCacheMatrix()
rm(cahcematrix)
rm(z)
rm(a)
z <- matrix(1, 3, 3)
z[1,1]=2
z[1,2]=3
z[1,3]=2
z[2,2]=2
z[3,3]=2
z
z <- matrix(1, 3, 3)
z[1,1]=2
z[3,1]=2
z[2,1]=3
z[2,2]=2
z[3,3]=2
z
cachematrix <- function() {
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setinvmat <- function(solve) im <<- solve
getinvmat <- function() im
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
im <- x$getinvmat()
if(!is.null(im)) {
message("getting cached data")
return(im)
}
data <- x$get()
im <- solve(data, ...)
x$setinvmat(im)
im
## Return a matrix that is the inverse of 'x'
}
}
a <- cachematrix(z)
a <- cachematrix()
a$makeCacheMatrix(z)
a$cacheSolve(z)
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setinvmat <- function(solve) im <<- solve
getinvmat <- function() im
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
cacheSolve <- function(x, ...) {
im <- x$getinvmat()
if(!is.null(im)) {
message("getting cached data")
return(im)
}
data <- x$get()
im <- solve(data, ...)
x$setinvmat(im)
im
## Return a matrix that is the inverse of 'x'
}
a$makeCacheMatrix(z)
a$cacheSolve(z)
a <- makeCacheMatrix(z)
a$get()
a$getinvmat()
a <- cacheSolve(z)
w <- a$get()
a$setinvmat(z)
a$getinvmat()
cacheSolve(a)
rm(w)
rm(cachematrix)
rm(cacheSolve)
rm(makeCacheMatrix)
rm(a)
cachematrix <- function() {
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setinvmat <- function(solve) im <<- solve
getinvmat <- function() im
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
im <- x$getinvmat()
if(!is.null(im)) {
message("getting cached data")
return(im)
}
data <- x$get()
im <- solve(data, ...)
x$setinvmat(im)
im
## Return a matrix that is the inverse of 'x'
}
}
a <- cachematrix()
a <- makeCacheMatrix(z)
a$get()
makeCacheMatrix <- function(x = matrix()) {
im <- NULL
set <- function(y) {
x <<- y
im <<- NULL
}
get <- function() x
setinvmat <- function(solve) im <<- solve
getinvmat <- function() im
list(set = set, get = get, setinvmat = setinvmat, getinvmat = getinvmat)
}
cacheSolve <- function(x, ...) {
im <- x$getinvmat()
if(!is.null(im)) {
message("getting cached data")
return(im)
}
data <- x$get()
im <- solve(data, ...)
x$setinvmat(im)
im
## Return a matrix that is the inverse of 'x'
}
a <- makeCacheMatrix(z)
cacheSolve(a)
cacheSolve(a)
a$setinvmat()
a$setinvmat(z)
a$getinvmat()
getwd()
rm(a)
rm(cachematrix)
source("cachematrix.R")
a <- makeCacheMatrix(z)
cacheSolve(a)
cacheSolve(a)
rm(a)
rm(cacheSolve)
rm(makeCacheMatrix)
source("cachematrix.R")
a <- makeCacheMatrix(z)
cacheSolve(a)
cacheSolve(a)
quit
quit()
